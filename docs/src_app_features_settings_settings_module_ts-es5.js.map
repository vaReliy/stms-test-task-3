{"version":3,"mappings":"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","names":["routes","path","component","_settings_settings_container_component__WEBPACK_IMPORTED_MODULE_0__","data","title","SettingsRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_2__","imports","exports","SettingsModule","_angular_common__WEBPACK_IMPORTED_MODULE_4__","_shared_shared_module__WEBPACK_IMPORTED_MODULE_0__","_settings_routing_module__WEBPACK_IMPORTED_MODULE_1__","declarations","_settings_settings_container_component__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_4__","title_r8","settings_r1","SettingsContainerComponent","store","_core_core_module__WEBPACK_IMPORTED_MODULE_0__","value","label","settings$","pipe","_core_settings_settings_selectors__WEBPACK_IMPORTED_MODULE_2__","language","dispatch","theme","autoNightMode","checked","stickyHeader","pageAnimations","elementsAnimations","selectors","decls","vars","consts","template"],"sources":["webpack:///src/app/features/settings/settings-routing.module.ts","webpack:///src/app/features/settings/settings.module.ts","webpack:///src/app/features/settings/settings/settings-container.component.html","webpack:///src/app/features/settings/settings/settings-container.component.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingsContainerComponent } from './settings/settings-container.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsContainerComponent,\n    data: { title: 'stms.menu.settings' }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingsRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SharedModule } from '../../shared/shared.module';\n\nimport { SettingsRoutingModule } from './settings-routing.module';\nimport { SettingsContainerComponent } from './settings/settings-container.component';\n\n@NgModule({\n  declarations: [SettingsContainerComponent],\n  imports: [CommonModule, SharedModule, SettingsRoutingModule]\n})\nexport class SettingsModule {}\n","<div rtl class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-sm-12\">\n      <h1>{{ 'stms.settings.title' | translate }}</h1>\n    </div>\n  </div>\n  <br>\n  <ng-container *ngIf=\"settings$ | async as settings\">\n    <div class=\"row\">\n      <div class=\"col-md-6 group\" [ngClass]=\"routeAnimationsElements\">\n        <h2>{{ 'stms.settings.general.title' | translate }}</h2>\n        <div class=\"icon-form-field\">\n          <mat-icon color=\"accent\">\n            <fa-icon icon=\"language\" color=\"accent\"></fa-icon>\n          </mat-icon>\n          <mat-form-field rtl>\n            <mat-select rtl [placeholder]=\"'stms.settings.general.placeholder' | translate\"\n              [ngModel]=\"settings.language\" (selectionChange)=\"onLanguageSelect($event)\" name=\"language\">\n              <ng-container *ngFor=\"let lang of languages\">\n                <!-- ngFor hack of missing ngLet of Angular -->\n                <mat-option rtl *ngFor=\"let title of ['stms.settings.general.language.' + lang.value | translate]\"\n                  [value]=\"lang.value\" [title]=\"title !== lang.label\n                    ? title\n                    : ''\">\n                  {{ lang.label }}\n                </mat-option>\n              </ng-container>\n            </mat-select>\n          </mat-form-field>\n        </div>\n        <div class=\"icon-form-field\">\n          <mat-icon color=\"accent\">\n            <fa-icon icon=\"bars\" color=\"accent\"></fa-icon>\n          </mat-icon>\n          <mat-placeholder>{{ 'stms.settings.themes.sticky-header' | translate }}\n          </mat-placeholder>\n          <mat-slide-toggle [checked]=\"settings.stickyHeader\" (change)=\"onStickyHeaderToggle($event)\">\n          </mat-slide-toggle>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6 group\" [ngClass]=\"routeAnimationsElements\">\n        <h2>{{ 'stms.settings.themes.title' | translate }}</h2>\n        <div class=\"icon-form-field\">\n          <mat-icon color=\"accent\">\n            <fa-icon icon=\"paint-brush\" color=\"accent\"></fa-icon>\n          </mat-icon>\n          <mat-form-field rtl>\n            <mat-select rtl [placeholder]=\"'stms.settings.themes.placeholder' | translate\" [ngModel]=\"settings.theme\"\n              (selectionChange)=\"onThemeSelect($event)\" name=\"themes\">\n              <mat-option rtl *ngFor=\"let theme of themes\" [value]=\"theme.value\">\n                {{ 'stms.settings.themes.' + theme.label | translate }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n        <div class=\"icon-form-field\">\n          <mat-icon color=\"accent\">\n            <fa-icon icon=\"lightbulb\" color=\"accent\"></fa-icon>\n          </mat-icon>\n          <mat-placeholder>{{ 'stms.settings.themes.night-mode' | translate }}\n          </mat-placeholder>\n          <mat-slide-toggle [checked]=\"settings.autoNightMode\" (change)=\"onAutoNightModeToggle($event)\">\n          </mat-slide-toggle>\n        </div>\n      </div>\n      <div class=\"col-md-6 group\" [ngClass]=\"routeAnimationsElements\">\n        <h2>{{ 'stms.settings.animations.title' | translate }}</h2>\n        <div class=\"icon-form-field\">\n          <mat-icon color=\"accent\">\n            <mat-icon color=\"accent\">\n              <fa-icon icon=\"window-maximize\"></fa-icon>\n            </mat-icon>\n          </mat-icon>\n          <mat-placeholder>{{ 'stms.settings.animations.page' | translate }}\n          </mat-placeholder>\n          <mat-slide-toggle matTooltip=\"Sorry, this feature is disabled in IE, EDGE and Safari\"\n            matTooltipPosition=\"before\" *ngIf=\"settings.pageAnimationsDisabled\" disabled>\n          </mat-slide-toggle>\n          <mat-slide-toggle *ngIf=\"!settings.pageAnimationsDisabled\" [checked]=\"settings.pageAnimations\"\n            (change)=\"onPageAnimationsToggle($event)\">\n          </mat-slide-toggle>\n        </div>\n        <div class=\"icon-form-field\">\n          <mat-icon color=\"accent\">\n            <fa-icon icon=\"stream\" color=\"accent\"></fa-icon>\n          </mat-icon>\n          <mat-placeholder>{{ 'stms.settings.animations.elements' | translate }}\n          </mat-placeholder>\n          <mat-slide-toggle [checked]=\"settings.elementsAnimations\" (change)=\"onElementsAnimationsToggle($event)\">\n          </mat-slide-toggle>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</div>","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { ROUTE_ANIMATIONS_ELEMENTS } from '../../../core/core.module';\n\nimport {\n  actionSettingsChangeAnimationsElements,\n  actionSettingsChangeAnimationsPage,\n  actionSettingsChangeAutoNightMode,\n  actionSettingsChangeLanguage,\n  actionSettingsChangeTheme,\n  actionSettingsChangeStickyHeader\n} from '../../../core/settings/settings.actions';\nimport { SettingsState, State } from '../../../core/settings/settings.model';\nimport { selectSettings } from '../../../core/settings/settings.selectors';\n\n@Component({\n  selector: 'st-settings',\n  templateUrl: './settings-container.component.html',\n  styleUrls: ['./settings-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SettingsContainerComponent implements OnInit {\n  routeAnimationsElements = ROUTE_ANIMATIONS_ELEMENTS;\n  settings$: Observable<SettingsState>;\n\n  themes = [\n    { value: 'DEFAULT-THEME', label: 'cyan' },\n    { value: 'LIGHT-THEME', label: 'light' },\n    { value: 'NATURE-THEME', label: 'nature' },\n    { value: 'BLACK-THEME', label: 'dark' }\n  ];\n\n  languages = [\n    { value: 'en', label: 'English' },\n    { value: 'he', label: 'עברית' }\n  ];\n\n  constructor(private store: Store<State>) {}\n\n  ngOnInit() {\n    this.settings$ = this.store.pipe(select(selectSettings));\n  }\n\n  onLanguageSelect({ value: language }) {\n    this.store.dispatch(actionSettingsChangeLanguage({ language }));\n  }\n\n  onThemeSelect({ value: theme }) {\n    this.store.dispatch(actionSettingsChangeTheme({ theme }));\n  }\n\n  onAutoNightModeToggle({ checked: autoNightMode }) {\n    this.store.dispatch(actionSettingsChangeAutoNightMode({ autoNightMode }));\n  }\n\n  onStickyHeaderToggle({ checked: stickyHeader }) {\n    this.store.dispatch(actionSettingsChangeStickyHeader({ stickyHeader }));\n  }\n\n  onPageAnimationsToggle({ checked: pageAnimations }) {\n    this.store.dispatch(actionSettingsChangeAnimationsPage({ pageAnimations }));\n  }\n\n  onElementsAnimationsToggle({ checked: elementsAnimations }) {\n    this.store.dispatch(\n      actionSettingsChangeAnimationsElements({ elementsAnimations })\n    );\n  }\n}\n"]}