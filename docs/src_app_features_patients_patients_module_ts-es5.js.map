{"version":3,"mappings":"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","names":["routes","path","component","_patients_patients_component__WEBPACK_IMPORTED_MODULE_0__","data","title","PatientsRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_2__","imports","exports","PatientsModule","_angular_common__WEBPACK_IMPORTED_MODULE_4__","_shared_shared_module__WEBPACK_IMPORTED_MODULE_0__","_patients_routing_module__WEBPACK_IMPORTED_MODULE_1__","declarations","_patients_patients_component__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","ctx_r0","PatientsComponent","store$","patientService","_core_core_module__WEBPACK_IMPORTED_MODULE_0__","pipe","_features_follow_list_follow_list_selectors__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_8__","rxjs__WEBPACK_IMPORTED_MODULE_9__","patientList$","refresh$","isLoading$","next","getPatientList","followedPatients$","patientList","followedPatients","map","patient","followUpPatient","find","fp","code","_a","dispatch","_features_follow_list_follow_list_actions__WEBPACK_IMPORTED_MODULE_3__","selectors","decls","vars","consts","template","ctx","PatientsRepo","http","url","_environments_environment__WEBPACK_IMPORTED_MODULE_0__","get","_angular_core__WEBPACK_IMPORTED_MODULE_2__","factory","providedIn","PatientService","patientsRepo","getList","_angular_core__WEBPACK_IMPORTED_MODULE_1__"],"sources":["webpack:///src/app/features/patients/patients-routing.module.ts","webpack:///src/app/features/patients/patients.module.ts","webpack:///src/app/features/patients/patients/patients.component.html","webpack:///src/app/features/patients/patients/patients.component.ts","webpack:///src/app/repositories/patients-repo.service.ts","webpack:///src/app/services/patient.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PatientsComponent } from './patients/patients.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PatientsComponent,\n    data: { title: 'stms.menu.patients' }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PatientsRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SharedModule } from '../../shared/shared.module';\n\nimport { PatientsRoutingModule } from './patients-routing.module';\nimport { PatientsComponent } from './patients/patients.component';\n\n@NgModule({\n  declarations: [PatientsComponent],\n  imports: [CommonModule, SharedModule, PatientsRoutingModule],\n  providers: []\n})\nexport class PatientsModule {}\n","<div class=\"container\">\n  <div rtl>\n    <h1 class=\"main-heading\">{{ 'stms.patients.title' | translate }}</h1>\n    <div class=\"actions\">\n      <button\n        (click)=\"onRefresh()\"\n        mat-raised-button class=\"actions-main\" color=\"primary\">\n        {{ 'stms.patients.get-patients' | translate }}\n      </button>\n\n      <st-patient-table\n        *ngIf=\"patientList$ | async as list\"\n        [data]=\"list\"\n        [isLoading$]=\"isLoading$\"\n        [actionType]=\"'add'\"\n        (action)=\"onFollowPatient($event)\">\n      </st-patient-table>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, combineLatest } from 'rxjs';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\n\nimport { ROUTE_ANIMATIONS_ELEMENTS } from '../../../core/core.module';\nimport { PatientService } from '../../../services/patient.service';\nimport { Patient } from '../../../shared/models/patient.model';\nimport { Store, select } from '@ngrx/store';\nimport { FollowListState } from '../../../features/follow-list/follow.list.reducers';\nimport { selectFollowedPatients } from '../../../features/follow-list/follow-list.selectors';\nimport { AddFollowListPatientAction } from '../../../features/follow-list/follow-list.actions';\n\n@Component({\n  selector: 'st-patients',\n  templateUrl: './patients.component.html',\n  styleUrls: ['./patients.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PatientsComponent implements OnInit {\n  routeAnimationsElements = ROUTE_ANIMATIONS_ELEMENTS;\n\n  patientList$: Observable<Patient[]>;\n\n  followedPatients$: Observable<Patient[]> = this.store$.pipe(select(selectFollowedPatients));\n\n  refresh$ = new Subject();\n\n  isLoading$ = new BehaviorSubject<boolean>(false);\n\n  constructor(\n    private readonly store$: Store<FollowListState>,\n    private readonly patientService: PatientService\n    ) {}\n\n  ngOnInit() {\n    this.patientList$ = this.refresh$.pipe(\n      tap(() => this.isLoading$.next(true)),\n      switchMap(() => combineLatest([\n        this.patientService.getPatientList(),\n        this.followedPatients$\n      ])),\n      map(([patientList, followedPatients]) => patientList.map(patient => ({\n          ...patient,\n          followUpPatient: followedPatients.find(fp => fp.code === patient.code)?.followUpPatient\n        }))),\n      catchError(() => {\n        // todo: do error handle\n        this.isLoading$.next(false);\n        return [];\n      }),\n      tap(() => this.isLoading$.next(false))\n    );\n  }\n\n  onRefresh(): void {\n    this.refresh$.next({});\n  }\n\n  onFollowPatient(patient: Patient): void {\n    this.store$.dispatch(new AddFollowListPatientAction({\n      patient: {\n        ...patient,\n        followUpPatient: true\n      }\n    }));\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Patient } from '../shared/models/patient.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PatientsRepo {\n  constructor(private readonly http: HttpClient) {\n  }\n\n  getList(): Observable<Patient[]> {\n    const url = `${environment.apiUrl}/v2/51597ef3`;\n\n    return this.http.get<{ patient: Patient[] }>(url).pipe(map(({patient}) => patient));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { PatientsRepo } from '../repositories/patients-repo.service';\nimport { Patient } from '../shared/models/patient.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n  constructor(private readonly patientsRepo: PatientsRepo) {}\n\n  getPatientList(): Observable<Patient[]> {\n    return this.patientsRepo.getList();\n  }\n}\n"]}