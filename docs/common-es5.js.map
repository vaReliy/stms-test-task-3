{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,UAAYA,qBAAZ;;AAAA,iBAAYA,oBAAZ,EAAgC;AAC5BA;AACAA;AACAA;AACAA;AACH,OALD,EAAYA,qBAAoB,KAApBA,qBAAoB,MAAhC;;AAKC;;UAEYC,sDAGT,mCAAmBC,OAAnB,EAEC;AAAA;;AAFkB;AAFV,oBAAOF,qBAAoB,CAACG,gBAA5B;AAIJ;;UAGIC,yDAGT,sCAAmBF,OAAnB,EAEC;AAAA;;AAFkB;AAFV,oBAAOF,qBAAoB,CAACK,mBAA5B;AAIJ;;UAGIC,wDAGT,qCAAmBJ,OAAnB,EAEC;AAAA;;AAFkB;AAFV,oBAAOF,qBAAoB,CAACO,kBAA5B;AAIJ;;UAIIC,2DAGT,wCAAmBN,OAAnB,EAEC;AAAA;;AAFkB;AAFV,oBAAOF,qBAAoB,CAACS,qBAA5B;AAIJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCF,UAAMC,0BAAyB,GAAG,oEAAuCC,wEAAvC,CAAlC;;AAEA,UAAMC,qBAAoB,GAAG,6DAChCF,0BADgC,EAEhC,UAACG,KAAD;AAAA,eAA4BA,KAAK,CAACC,cAAlC;AAAA,OAFgC,CAA7B;;AAKA,UAAMC,uBAAsB,GAAG,6DAClCL,0BADkC,EAElC,UAACG,KAAD;AAAA,eAA4BA,KAAK,CAACG,gBAAlC;AAAA,OAFkC,CAA/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA,UAAMC,sBAAqB,GAAG,YAA9B;AAOA,UAAMC,yBAAwB,GAAoB;AACrDF,wBAAgB,EAAE,EADmC;AAErDF,sBAAc,EAAE;AAFqC,OAAlD;;AAKA,UAAMK,kBAAiB,GAAG,SAApBA,kBAAoB,GAAgF;AAAA,YAA/EN,KAA+E,uEAAtDK,yBAAsD;AAAA,YAA5BE,MAA4B;;AAC7G,gBAAQA,MAAM,CAACC,IAAf;AACI,eAAKC,uFAAL;AAA4C;AACxC,qDACOT,KADP,GACY;AACRC,8BAAc,+BACPD,KAAK,CAACC,cADC,IAEVM,MAAM,CAAClB,OAAP,CAAeqB,KAFL;AADN,eADZ;AAOH;AAAA;;AAED,eAAKD,0FAAL;AAA+C;AAC3C,qDACOT,KADP,GACY;AACRC,8BAAc,EAAED,KAAK,CAACC,cAAN,CACbU,MADa,CACN;AAAA,sBAAEC,QAAF,QAAEA,QAAF;AAAA,yBAAgBA,QAAQ,KAAKL,MAAM,CAAClB,OAAP,CAAeuB,QAA5C;AAAA,iBADM;AADR,eADZ;AAKH;;AAED,eAAKH,yFAAL;AAA8C;AAC1C,qDACOT,KADP,GACY;AACRG,gCAAgB,+BACTH,KAAK,CAACG,gBADG,IAEZI,MAAM,CAAClB,OAAP,CAAewB,OAFH;AADR,eADZ;AAOH;;AAED,eAAKJ,4FAAL;AAAiD;AAC7C,qDACOT,KADP,GACY;AACRG,gCAAgB,EAAEH,KAAK,CAACG,gBAAN,CACfQ,MADe,CACR;AAAA,sBAAEG,IAAF,SAAEA,IAAF;AAAA,yBAAYA,IAAI,KAAKP,MAAM,CAAClB,OAAP,CAAeyB,IAApC;AAAA,iBADQ;AADV,eADZ;AAKH;;AAED;AAAS,mBAAOd,KAAP;AArCb;AAuCH,OAxCM;;;;","names":["FollowListActionType","AddFollowListOrderAction","payload","addFollowedOrder","RemoveFollowListOrderAction","removeFollowedOrder","AddFollowListPatientAction","addFollowedPatient","RemoveFollowListPatientAction","removeFollowedPatient","selectorFollowListFeature","_follow_list_reducers__WEBPACK_IMPORTED_MODULE_0__","selectFollowedOrders","state","followedOrders","selectFollowedPatients","followedPatients","featureFollowListNode","defaultFollowedListState","followListReducer","action","type","_follow_list_actions__WEBPACK_IMPORTED_MODULE_0__","order","filter","orderNum","patient","code"],"sources":["webpack:///src/app/features/follow-list/follow-list.actions.ts","webpack:///src/app/features/follow-list/follow-list.selectors.ts","webpack:///src/app/features/follow-list/follow.list.reducers.ts"],"sourcesContent":["import { Action } from '@ngrx/store';\nimport { Order } from '../../shared/models/order.model';\nimport { Patient } from '../../shared/models/patient.model';\n\nexport enum FollowListActionType {\n    addFollowedOrder = '[FollowList] add followed order',\n    removeFollowedOrder = '[FollowList] remove followed order',\n    addFollowedPatient = '[FollowList] add followed patient',\n    removeFollowedPatient = '[FollowList] remove followed patient',\n};\n\nexport class AddFollowListOrderAction implements Action {\n    readonly type = FollowListActionType.addFollowedOrder;\n\n    constructor(public payload: {\n        order: Order;\n    }) {}\n}\n\nexport class RemoveFollowListOrderAction implements Action {\n    readonly type = FollowListActionType.removeFollowedOrder;\n\n    constructor(public payload: {\n        orderNum: number;\n    }) {}\n}\n\nexport class AddFollowListPatientAction implements Action {\n    readonly type = FollowListActionType.addFollowedPatient;\n\n    constructor(public payload: {\n        patient: Patient;\n    }) {}\n}\n\n\nexport class RemoveFollowListPatientAction implements Action {\n    readonly type = FollowListActionType.removeFollowedPatient;\n\n    constructor(public payload: {\n        code: number;\n    }) {}\n}\n\nexport type FollowListAction =\n    AddFollowListOrderAction\n  | RemoveFollowListOrderAction\n  | AddFollowListPatientAction\n  | RemoveFollowListPatientAction;\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { FollowListState, featureFollowListNode } from './follow.list.reducers';\n\nexport const selectorFollowListFeature = createFeatureSelector<FollowListState>(featureFollowListNode);\n\nexport const selectFollowedOrders = createSelector(\n    selectorFollowListFeature,\n    (state: FollowListState) => state.followedOrders\n);\n\nexport const selectFollowedPatients = createSelector(\n    selectorFollowListFeature,\n    (state: FollowListState) => state.followedPatients\n);\n","import { Order } from 'app/shared/models/order.model';\nimport { FollowListAction, FollowListActionType } from './follow-list.actions';\nimport { Patient } from 'app/shared/models/patient.model';\n\nexport const featureFollowListNode = 'followList';\n\nexport interface FollowListState {\n    followedPatients: Patient[];\n    followedOrders: Order[];\n}\n\nexport const defaultFollowedListState: FollowListState = {\n    followedPatients: [],\n    followedOrders: [],\n};\n\nexport const followListReducer = (state: FollowListState = defaultFollowedListState, action: FollowListAction) => {\n    switch (action.type) {\n        case FollowListActionType.addFollowedOrder: {\n            return {\n                ...state,\n                followedOrders: [\n                    ...state.followedOrders,\n                    action.payload.order\n                ]\n            };\n        };\n\n        case FollowListActionType.removeFollowedOrder: {\n            return {\n                ...state,\n                followedOrders: state.followedOrders\n                  .filter(({orderNum}) => orderNum !== action.payload.orderNum)\n            };\n        }\n\n        case FollowListActionType.addFollowedPatient: {\n            return {\n                ...state,\n                followedPatients: [\n                    ...state.followedPatients,\n                    action.payload.patient\n                ]\n            };\n        }\n\n        case FollowListActionType.removeFollowedPatient: {\n            return {\n                ...state,\n                followedPatients: state.followedPatients\n                  .filter(({code}) => code !== action.payload.code)\n            };\n        }\n\n        default: return state;\n    }\n};\n"]}